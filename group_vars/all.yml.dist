###
### Ansible NAS Features
###
# Set these options to true or "false" to toggle specific features

### External Access
# Traefik will allow access to certain applications externally. To enable this you'll either; a domain name that points to your 
# home static IP address, the cloudflare with the cloudflare_ddns dynamic DNS container enabled, or use a dynamic DNS provider like no-ip.
# You'll also need to map ports 80 and 443 from your router to your ansible-nas server, then enable the per-app "available_externally"
# settings.
traefik_enabled: "false"

### Backup & Restore
duplicati_enabled: "false"
nextcloud_enabled: "false"
timemachine_enabled: "false"

### Content Management Systems, Wiki, Git and Blogs
joomla_enabled: "false"
dokuwiki_enabled: "false"
gitea_enabled: "false"

### Downloading
# If you plan to use Transmission with OpenVPN, you'll need to copy group_vars/vpn_credentials.yml.dist
# to group_vars/vpn_credentials.yml, then update it with your own settings.
nzbget_enabled: "false"
pyload_enabled: "false"
transmission_enabled: "false"
transmission_with_openvpn_enabled: "false"

### EBooks
calibre_enabled: "false"

### IRC
znc_enabled: "false"
thelounge_enabled: "false"

### Finance
firefly_enabled: "false"

### Games
minetest_enabled: "false"

### Home Automation
homeassistant_enabled: "false"
mosquitto_enabled: "false"
homebridge_enabled: "false"
openhab_enabled: "false"

### Media Management and Distribution
emby_enabled: "false"
htpcmanager_enabled: "false"
jellyfin_enabled: "false"
minidlna_enabled: "false"
plex_enabled: "false"
tautulli_enabled: "false"

### Media Sourcing
bazarr_enabled: "false"
couchpotato_enabled: "false"
get_iplayer_enabled: "false"
jackett_enabled: "false"
bazarr_enabled: "false"
ombi_enabled: "false"
radarr_enabled: "false"
sickchill_enabled: "false"
sonarr_enabled: "false"


### Music
airsonic_enabled: "false"
beets_enabled: "false"
mymediaforalexa_enabled: "false"

### News
miniflux_enabled: "false"

### Password Management
bitwarden_enabled: "false"

### System Management
cloudcmd_enabled: "false"
cloudflare_ddns_enabled: "false"
docker-autoheal_enabled: "false"
glances_enabled: "false"
guacamole_enabled: "false"
heimdall_enabled: true
netdata_enabled: "false"
portainer_enabled: true
stats_enabled: "false"
watchtower_enabled: "false"

### Webtools
wallabag_enabled: "false"

###
### General
###
# Sets the hostname of your Ansible NAS
ansible_nas_hostname: "ansible-nas"

# Sets the timezone for your Ansible NAS
# You can find a list here https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
ansible_nas_timezone: "Etc/UTC"

# Update all apt packages when playbook is run
keep_packages_updated: "false"

# Will be added to the docker group to give user command line access to docker
ansible_nas_user: "david"

# Your email and domain, used for Let's Encrypt SSL certs
ansible_nas_email: "me@example.com"

# Applications will have subdomain SSL certificates created, e.g. ansible-nas.<your-domain>, nextcloud.<your-domain>
ansible_nas_domain: "example.com"

###
### Docker
###
# Where you want Docker to store images
docker_image_directory: "{{ docker_home }}/data"

# Where you want Docker to store its container data.
docker_home: "/mnt/Volume2/docker"

# Docker storage driver, see https://docs.docker.com/storage/storagedriver/select-storage-driver/#supported-backing-filesystems
# You might want to change this to ZFS, depending on your underlying filesystem.
docker_storage_driver: "overlay2"

###
### Samba
###
# The location where all shares will be created by default. Can be overridden on a per-share basis.
# This path will be mounted to backup containers, Duplicati
samba_shares_root: "/mnt/Volume3"

# Where stuff downloaded will be stored
downloads_root: "{{ samba_shares_root }}/downloads"

# Where your movies are stored
movies_root: "{{ samba_shares_root }}/movies"

# Where your TV episodes are stored
tv_root: "{{ samba_shares_root }}/tv"

# Where torrent files are stored (picked up by Transmission for downloading)
torrents_root: "{{ samba_shares_root }}/torrents"
torrents_openvpn_root: "{{ samba_shares_root }}/torrents_openvpn"

# Where music is stored
music_root: "{{ samba_shares_root }}/music"

# Where podcasts are stored
podcasts_root: "{{ samba_shares_root }}/podcasts"

# Where your books are stored
books_root: "{{ samba_shares_root }}/books"

# Where photos are stored
photos_root: "{{ samba_shares_root }}/photos"

# Where audiobooks are stored
audiobooks_root: "{{ samba_shares_root }}/audiobooks"

# The description that'll appear next to your Ansible-NAS box when browsing your network
samba_server_string: "Ansible NAS"

# Shares you want published over Samba.
samba_shares:
  - name: "downloads"
    comment: "Stuff downloaded"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ downloads_root }}"

  - name: "movies"
    comment: "Movies"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ movies_root }}"

  - name: "tv"
    comment: "TV Episodes"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ tv_root }}"

  - name: "music"
    comment: "Music"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ music_root }}"

  - name: "podcasts"
    comment: "Podcasts"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ podcasts_root }}"

  - name: "dump"
    comment: "File dump"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ samba_shares_root }}/dump"

  - name: "games"
    comment: "Games"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ samba_shares_root }}/games"

  - name: "photos"
    comment: "Pictures"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ samba_shares_root }}/photos"

  - name: "books"
    comment: "Books"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ samba_shares_root }}/books"

  - name: "audiobooks"
    comment: "Audiobooks"
    guest_ok: "yes"
    public: "yes"
    writable: "yes"
    browsable: "yes"
    path: "{{ samba_shares_root }}/audiobooks"

###
### NFS
###
# Data you want published over NFS. More info on the NFS config format can be found at
# https://help.ubuntu.com/community/SettingUpNFSHowTo#Shares
# WARNING: Weird things might happen if you share the same data over Samba and NFS and allow writes on both!

nfs_shares_root: "/mnt/Volume3"

nfs_exports:
  - "{{ nfs_shares_root }}/public *(rw,sync,no_root_squash)"


###
### Cloudflare
###
## Cloudflare is a great free DNS option for domains. If you use the cloudflare_ddns container then you'll need to set the options below.
## Don't forget to set cloudflare_api_key in secret.yml
# Your domain name
cloudflare_zone: "{{ ansible_nas_domain }}"
# The hostname you want the container to update. You shouldn't need to change this.
cloudflare_host: "*.{{ cloudflare_zone }}"
# Email address used to register for Cloudflare
cloudflare_email: "{{ ansible_nas_email }}"

# Container Settings (You shouldn't need to edit these unless you need to fine tune the container)
cloudflare_image: "joshava/cloudflare-ddns:latest"
cloudflare_restart_policy: "unless-stopped"
cloudflare_memory_limit: "512MB"

###
### General
###
# Extra packages to install - you shouldn't edit these, but can add your own
ansible_nas_extra_packages:
  - "smartmontools"
  - "htop"
  - "zfsutils-linux"
  - "bonnie++"
  - "unzip"
  - "lm-sensors"
  - "ctop"
# Path to Python
ansible_python_interpreter: "/usr/bin/python3"

###
### Samba
###
# Seems to break browsing of the \\server-name shares root when enabled
samba_mitigate_cve_2017_7494: "false"
# Enable apple exentensions for compatibility with apple clients
samba_apple_extensions: "yes"
# The account used when Samba shares are accessed. Shouldn't need to change this unless you want to
# mess with Samba user permissions.
ansible_nas_username: "ansible-nas"
ansible_nas_usergroup: "ansible-nas"
samba_guest_account: "{{ ansible_nas_username }}"
# How Samba behaves when an unknown user connects, see Samba docs for more info
samba_map_to_guest: "Bad Password"
# The NetBIOS hostname used by Samba on your network
samba_netbios_name: "{{ ansible_nas_hostname }}"

###############################################################
###### Fine tune the container settings below this point ######
###############################################################

###
### Airsonic
###
# If you're paranoid, set airsonic_permissions to "ro" to prevent airsonic modifying your music, podcasts or audiobooks folders
airsonic_available_externally: "false"
airsonic_image: "airsonic/airsonic:latest"
airsonic_data_directory: "{{ docker_home }}/airsonic"
airsonic_permissions: "rw"
airsonic_audiobooks: "{{ audiobooks_root }}"
airsonic_music: "{{ music_root }}"
airsonic_podcasts: "{{ podcasts_root }}"
airsonic_memory_limit: "1g"
airsonic_restart_policy: "unless-stopped"
airsonic_subdomain: "airsonic"

###
### Autoheal
###
# autoheal_interval, autoheal_kill_wait and autoheal_start_period is in seconds
autoheal_image: "willfarrell/autoheal"
autoheal_interval: "5"
autoheal_start_after: "0"
autoheal_kill_wait: "10"
autoheal_restart_policy: "always"
autoheal_memory_limit: "1g"

###
### Bazarr
###
# If you're paranoid, set bazarr_permissions to "ro" to prevent Bazarr modifying your videos
bazarr_available_externally: "false"
bazarr_data_directory: "{{ docker_home }}/bazarr/config"
bazarr_permissions: "rw"
bazarr_tv_directory: "{{ tv_root }}"
bazarr_movies_directory: "{{ movies_root }}"
bazarr_user_id: "0"
bazarr_group_id: "0"
bazarr_image: "linuxserver/bazarr"
bazarr_memory_limit: "1g"
bazarr_restart_policy: "unless-stopped"
bazarr_subdomain: "bazarr"

###
### Beets
###
beets_avaliable_externally: "false"
beets_data_directory: "{{ docker_home }}/beets"
beets_import_directory: "{{ downloads_root }}"
beets_music_directory: "{{ music_root }}"
beets_image: "linuxserver/beets"
beets_user_id: "0"
beets_group_id: "0"
beets_restart_policy: "unless-stopped"
beets_memory_limit: "1g"
beets_subdomain: "beets"

###
### Bitwarden
###
# Don't forget to set bitwarden_admin_token in secret.yml
bitwarden_available_externally: "false"
bitwarden_data_directory: "{{ docker_home }}/bitwarden"
bitwarden_image: "mprasil/bitwarden:latest"
bitwarden_backup_image: "bruceforce/bw_backup:latest"
bitwarden_restart_policy: "unless-stopped"
bitwarden_memory_limit: "1g"
bitwarden_backup_memory_limit: "1g"
bitwarden_subdomain: "bitwarden"
# To create an initial user set this to "true", and reprovision the container by re-running the ansible-nas playbook.
# Once you have created your user, set to "false" and run one more time.
# Target just Bitwarden by running: ansible-playbook -i inventory nas.yml -b -K -t bitwarden
bitwarden_allow_signups: "false"

###
### Calibre
###
# To disable ebook conversion set calibre_ebook_conversion to "". To enable it set it to "linuxserver/calibre-web:calibre"
calibre_available_externally: "false"
calibre_data_directory: "{{ docker_home }}/calibre"
calibre_image: "linuxserver/calibre-web:latest"
calibre_books_root: "{{ books_root }}"
calibre_user_id: "0"
calibre_group_id: "0"
calibre_restart_policy: "unless-stopped"
calibre_memory_limit: "1g"
calibre_subdomain: "calibre"
#calibre_ebook_conversion: "linuxserver/calibre-web:calibre"
calibre_ebook_conversion: ""

###
### CloudCmd
###
cloudcmd_available_externally: "false"
cloudcmd_data_directory: "{{ docker_home }}/cloudcmd/config"
cloudcmd_browse_directory: "/"
cloudcmd_image: "coderaiser/cloudcmd"
cloudcmd_user_id: "0"
cloudcmd_group_id: "0"
cloudcmd_restart_policy: "unless-stopped"
cloudcmd_memory_limit: "1g"
cloudcmd_subdomain: "cloudcmd"

###
### Couchpotato
###
couchpotato_available_externally: "false"
couchpotato_config_directory: "{{ docker_home }}/couchpotato/config"
couchpotato_movies_directory: "{{ movies_root }}"
couchpotato_downloads_directory: "{{ downloads_root }}/completed"
couchpotato_torrents_directory: "{{ torrents_root }}"
couchpotato_user_id: "0"
couchpotato_group_id: "0"
couchpotato_image: "linuxserver/couchpotato"
couchpotato_restart_policy: "unless-stopped"
couchpotato_memory_limit: "1g"
couchpotato_subdomain: "couchpotato"

###
### Dokuwiki
###
dokuwiki_avaliable_externally: "false"
dokuwiki_data_directory: "{{ docker_home }}/dokuwiki"
dokuwiki_image: "bitnami/dokuwiki:0"
dokuwiki_restart_policy: "unless-stopped"
dokuwiki_memory_limit: "1g"
dokuwiki_subdomain: "dokuwiki"

###
### Duplicati
###
duplicati_available_externally: "false"
duplicati_data_directory: "{{ docker_home }}/duplicati/config"
duplicati_shares: "{{ samba_shares_root }}"
duplicati_image: "linuxserver/duplicati"
duplicati_user_id: "0"
duplicati_group_id: "0"
duplicati_restart_policy: "unless-stopped"
duplicati_memory_limit: "1g"
duplicati_subdomain: "duplicati"

###
### Emby
###
# If you're paranoid, set permissions to "ro" so Emby won't ever be able to
# delete your files
emby_available_externally: "false"
emby_config_directory: "{{ docker_home }}/emby/config"
emby_movies_directory: "{{ movies_root }}"
emby_movies_permissions: "rw"
emby_tv_directory: "{{ tv_root }}"
emby_tv_permissions: "rw"
emby_user_id: "0"
emby_group_id: "0"
emby_image: "emby/embyserver"
emby_restart_policy: "unless-stopped"
emby_memory_limit: "1g"
emby_subdomain: "emby"

###
### Firefly
###
# Don't forget to set firefly_app_key, firefly_mysql_password and firefly_root_mysql_password in secrets.yml
firefly_available_externally: "false"
firefly_data_directory: "{{ docker_home }}/firefly"
firefly_image: "jc5x/firefly-iii:latest"
firefly_subdomain: "firefly"






###
### Traefik
###
traefik_docker_image: "traefik:v1.7"
traefik_data_directory: "{{ docker_home }}/traefik"
traefik_debug: "false"

###
### Heimdall
###
heimdall_available_externally: "false"
heimdall_docker_image: "linuxserver/heimdall:latest"
heimdall_data_directory: "{{ docker_home }}/heimdall"
heimdall_port_http: "10080"
heimdall_port_https: "10443"
heimdall_subdomain: "heimdall"

###
### Transmission
###
transmission_available_externally: "false"
transmission_config_directory: "{{ docker_home }}/transmission/config"
transmission_download_directory: "{{ downloads_root }}"
transmission_watch_directory: "{{ torrents_root }}"
transmission_user_id: "0"
transmission_group_id: "0"
transmission_local_network: "192.168.1.0/24"
transmission_webui_port: "9092"
transmission_external_port: "51414"
transmission_subdomain: "transmission"
transmission_image: "linuxserver/transmission"

###
### Transmission with OpenVPN
###
transmission_with_openvpn_available_externally: "false"
transmission_openvpn_image: "haugene/transmission-openvpn"
transmission_openvpn_config_directory: "{{ docker_home }}/transmissionvpn/config"
transmission_openvpn_download_directory: "{{ downloads_root }}"
transmission_openvpn_watch_directory: "{{ torrents_openvpn_root }}"
transmission_openvpn_user_id: "0"
transmission_openvpn_group_id: "0"
transmission_openvpn_local_network: "192.168.1.0/24"
transmission_openvpn_webui_port: "9093"
transmission_openvpn_external_port: "51415"
transmission_openvpn_subdomain: "transmission-openvpn"

###
### Joomla
###
joomla_data_directory: "{{ docker_home }}/joomla"
joomla_available_externally: "false"
joomla_database_password: "top_secret"
joomla_image: "joomla"
joomla_port: "8181"
joomla_subdomain: "joomla"

###
### pyLoad
###
pyload_available_externally: "false"
pyload_config_directory: "{{ docker_home }}/pyload"
pyload_download_directory: "{{ downloads_root }}"
pyload_user_id: "0"
pyload_group_id: "0"
pyload_image: "writl/pyload"
pyload_port: "8000"
pyload_subdomain: "pyload"

###
### Plex
###
# If you're paranoid, set permissions to "ro" so Plex won't ever be able to
# delete your files
plex_available_externally: "false"
plex_config_directory: "{{ docker_home }}/plex/config"
plex_movies_directory: "{{ movies_root }}"
plex_movies_permissions: "rw"
plex_tv_directory: "{{ tv_root }}"
plex_tv_permissions: "rw"
plex_photos_directory: "{{ photos_root }}"
plex_photos_permissions: "rw"
plex_music_directory: "{{ music_root }}"
plex_music_permissions: "rw"
plex_user_id: "0"
plex_group_id: "0"
plex_image: "linuxserver/plex"
plex_port: "32400"
plex_logs: "{{docker_home }}/plex/logs"
plex_subdomain: "plex"

###
### Homebridge
###
homebridge_available_externally: "false"
homebridge_config_directory: "{{ docker_home }}/homebridge/config"
homebridge_user_id: "0"
homebridge_group_id: "0"
homebridge_image: "oznu/homebridge"
homebridge_port: "8087"
homebridge_subdomain: "homebridge"



###
### Tautulli
###
tautulli_available_externally: "false"
tautulli_config_directory: "{{ docker_home }}/tautulli/config"
tautulli_user_id: "0"
tautulli_group_id: "0"
tautulli_image: "linuxserver/tautulli"
tautulli_port: "8185"
tautulli_subdomain: "tautulli"



###
### Sonarr
###
sonarr_available_externally: "false"
sonarr_data_directory: "{{ docker_home }}/sonarr/config"
sonarr_tv_directory: "{{ tv_root }}"
sonarr_download_directory: "{{ downloads_root }}"
sonarr_user_id: "0"
sonarr_group_id: "0"
sonarr_image: "linuxserver/sonarr"
sonarr_port: "8989"
sonarr_subdomain: "sonarr"

###
### Radarr
###
radarr_available_externally: "false"
radarr_movies_directory: "{{ movies_root }}"
radarr_download_directory: "{{ downloads_root }}"
radarr_data_directory: "{{ docker_home }}/radarr"
radarr_user_id: "0"
radarr_group_id: "0"
radarr_image: "linuxserver/radarr"
radarr_port: "7878"
radarr_subdomain: "radarr"





###
### Sickchill
###
sickchill_available_externally: "false"
sickchill_config_directory: "{{ docker_home }}/sickchill/config"
sickchill_tv_directory: "{{ tv_root }}"
sickchill_downloads_directory: "{{ downloads_root }}/completed"
sickchill_user_id: "0"
sickchill_group_id: "0"
sickchill_image: "linuxserver/sickchill"
sickchill_port: "8081"
sickchill_subdomain: "sickchill"

###
### Ombi
###
ombi_available_externally: "false"
ombi_config_directory: "{{ docker_home }}/ombi/config"
ombi_user_id: "0"
ombi_group_id: "0"
ombi_subdomain: "ombi"
ombi_image: "linuxserver/ombi"
ombi_port: "3579"

###
### Netdata
###
netdata_available_externally: "false"
netdata_image: "netdata/netdata"
netdata_port: "19999"
netdata_subdomain: "netdata"

###
### OpenVPN
###
openvpn_config_directory: "{{ docker_home }}/openvpn"
openvpn_client_image: "dceschmidt/openvpn-client"

###
### Portainer
###
portainer_available_externally: "false"
portainer_data_directory: "{{ docker_home }}/portainer/config"
portainer_image: "portainer/portainer"
portainer_port: "9000"
portainer_subdomain: "portainer"

###
### ZNC
###
znc_available_externally: "false"
znc_data_directory: "{{ docker_home }}/znc"
znc_user_id: "0"
znc_group_id: "0"
znc_image: "znc"
znc_port: "6677"
znc_subdomain: "znc"

###
### Stats
###
grafana_available_externally: "false"
telegraf_data_directory: "{{ docker_home }}/telegraf"
influxdb_data_directory: "{{ docker_home }}/influxdb"
grafana_data_directory: "{{ docker_home }}/grafana"
stat_collection_interval: "15s"
grafana_influxdb_port: "8086"
grafana_image: "grafana/grafana"
grafana_port: "3000"
grafana_subdomain: "grafana"

###
### Gitea
###
gitea_available_externally: "false"
gitea_data_directory: "{{ docker_home }}/gitea"
gitea_image: "gitea/gitea:latest"
gitea_port_http: "3001"
gitea_port_ssh: "222"
gitea_subdomain: "gitea"

###
### Glances
###
glances_available_externally: "false"
glances_image: "nicolargo/glances"
glances_port_one: "61208"
glances_port_two: "61209"
glances_subdomain: "glances"

###
### Nextcloud
###
nextcloud_available_externally: "false"
nextcloud_data_directory: "{{ docker_home }}/nextcloud"
nextcloud_image: "nextcloud:14"
nextcloud_port: "8080"
nextcloud_subdomain: "nextcloud"

###
### nginx
###
nginx_data_directory: "{{ docker_home }}/nginx"
nginx_image: "jwilder/nginx-proxy"
nginx_port_http: "80"
nginx_port_https: "443"
nginx_lets_encrypt_image: "jrcs/letsencrypt-nginx-proxy-companion"

###
### Guacamole
###
guacamole_available_externally: "false"
guacamole_docker_image: "guacamole/guacamole:0.9.14"
guacamole_guacd_docker_image: "guacamole/guacd:0.9.14"
guacamole_data_directory: "{{ docker_home }}/guacamole"
guacamole_port: "8090"
guacamole_subdomain: "guacamole"

###
### Miniflux
###
miniflux_available_externally: "false"
miniflux_data_directory: "{{ docker_home }}/miniflux"
miniflux_admin_username: "admin"
miniflux_admin_password: "supersecure"
miniflux_image: "miniflux/miniflux:latest"
miniflux_port: "8070"
miniflux_subdomain: "miniflux"





###
### Watchtower
###
# Sets the 6 field cron schedule to use for checks and updates. This will check at 5am daily.
watchtower_cron_schedule: "0 0 5 * * *"
watchtower_image: "v2tec/watchtower"

# Sets the Watchtower Docker start command. Different options can be supplied based on whether you want to receive
# notifications or not, some examples are provided below. See https://github.com/v2tec/watchtower for more info.

# No notifications
watchtower_command: "--schedule '{{ watchtower_cron_schedule }}' --debug"

# Email notifications
# watchtower_command: "--schedule '{{ watchtower_cron_schedule }}' --notifications 'email' --notification-email-from 'ansible@nas.com' --notification-email-to '{{ ansible_nas_email }}' --notification-email-server 'my.email.server.com' --notification-email-server-port '25' --notification-email-server-user 'email_username' --notification-email-server-password 'top-secret'"

# Slack notifications
# watchtower_command: "--schedule '{{ watchtower_cron_schedule }}' --notifications 'slack' --notification-slack-hook-url 'https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy' --notification-slack-identifier 'ansible-nas'"

###
### Time Machine
###
timemachine_data_directory: "{{ docker_home }}/timemachine"
timemachine_volume_size_limit: "0"
timemachine_password: "timemachine"
timemachine_share_name: "Data"
timemachine_log_level: "error"
timemachine_port: "10445"
timemachine_image: "awlnx/samba-timemachine:latest"

###
### minidlna
###
minidlna_media_directory1: "{{ movies_root }}"
minidlna_media_directory2: "{{ tv_root }}"
minidlna_friendly_name: "{{ ansible_nas_hostname }}"
minidlna_image: "vladgh/minidlna"
minidlna_port: "8201"

###
### get_iplayer
###
get_iplayer_config_directory: "{{ docker_home }}/get_iplayer"
get_iplayer_download_directory: "{{ tv_root }}/iplayer_downloads"
get_iplayer_available_externally: "false"
get_iplayer_image: "kolonuk/get_iplayer"
get_iplayer_port: "8182"
get_iplayer_subdomain: "get_iplayer"

###
### mymediaforalexa
###
mymediaforalexa_media_directory: "{{ music_root }}"
mymediaforalexa_data_directory: "{{ docker_home }}/mymediaforalexa"
mymediaforalexa_image: "bizmodeller/mymediaforalexa"

###
### Jackett
###
jackett_available_externally: "false"
jackett_data_directory: "{{ docker_home }}/jackett"
jackett_image: "linuxserver/jackett"
jackett_port: "9117"
jackett_subdomain: "jackett"

###
### The Lounge
###
thelounge_available_externally: "false"
thelounge_data_directory: "{{ docker_home }}/thelounge"
thelounge_image: "thelounge/thelounge:latest"
thelounge_port_one: "113"
thelounge_port_two: "9002"
thelounge_subdomain: "thelounge"




###
### Nzbget
###
nzbget_available_externally: "false"
nzbget_data_directory: "{{ docker_home }}/nzbget"
nzbget_download_directory: "{{ downloads_root }}"
nzbget_user_id: "0"
nzbget_group_id: "0"
nzbget_image: "linuxserver/nzbget"
nzbget_port: "6789"
nzbget_subdomain: "nzbget"

###
### Wallabag
###
wallabag_available_externally: "false"
wallabag_data_directory: "{{ docker_home }}/wallabag"
wallabag_image: "wallabag/wallabag:latest"
wallabag_port: "7780"
wallabag_subdomain: "wallabag"

###
### Mosquitto
###
mosquitto_available_externally: "false"
mosquitto_data_directory: "{{ docker_home }}/mosquitto"
mosquitto_image: "eclipse-mosquitto:latest"
mosquitto_port_a: "1883"
mosquitto_port_b: "9001"



###
### Home Assistant
###
homeassistant_available_externally: "false"
homeassistant_data_directory: "{{ docker_home }}/homeassistant"
homeassistant_image: "homeassistant/home-assistant"
homeassistant_port: "8123"
homeassistant_subdomain: "homeassistant"

###
### openHAB
###
openhab_available_externally: "false"
openhab_docker_image: openhab/openhab:latest
openhab_data_directory: "{{ docker_home }}/openhab"
openhab_port_http: "7777"
openhab_port_https: "7778"
openhab_subdomain: "openhab"

###
### Jellyfin
###
# If you're paranoid, set permissions to "ro" so jellyfin won't ever be able to
# delete your files
jellyfin_available_externally: "false"
jellyfin_config_directory: "{{ docker_home }}/jellyfin/config"
jellyfin_movies_directory: "{{ movies_root }}"
jellyfin_movies_permissions: "rw"
jellyfin_tv_directory: "{{ tv_root }}"
jellyfin_tv_permissions: "rw"
jellyfin_user_id: "0"
jellyfin_group_id: "0"
jellyfin_image: "linuxserver/jellyfin"
jellyfin_port_http: "8896"
jellyfin_port_https: "8928"
jellyfin_subdomain: "jellyfin"minetest_data_directory



###
### Minetest
###
minetest_available_eternally: "false"
minetest_image: "linuxserver/minetest"
minetest_port: "30000"
minetest_data_directory: "{{ docker_home }}/minetest"
minetest_user_id: "0"
minetest_group_id: "0"
minetest_subdomain: "minetest"

###
### htpcmanager
###
htpcmanager_available_externally: "false"
htpcmanager_image: "linuxserver/htpcmanager"
htpcmanager_data_directory: "{{ docker_home }}/htpcmanager"
htpcmanager_port: "8085"
htpcmanager_user_id: "0"
htpcmanager_group_id: "0"
htpcmanager_subdomain: "htpcmanager"





###
### Redmine
###
redmine_avaliable_externally: "false"
redmine_image: "bitnami/redmine:4"
redmine_database: "{{ docker_home }}/redmine/database"
redmine_data_directory: "{{ docker_home }}/redmine/data"
redmine_port: "4653"
redmine_subdomain: "redmine"

###
### Lazylibrarian
###
lazylibrarian_avaliable_externally: "false"
lazylibrarian_image: "linuxserver/lazylibrarian"
lazylibrarian_user_id: "0"
lazylibrarian_group_id: "0"
lazylibrarian_data_directory: "{{ docker_home }}/lazylibrarian"
lazylibrarian_books: "{{ books_root }}"
lazylibrarian_downloads: "{{ downloads_root }}"
lazylibrarian_port: "5299"
lazylibrarian_subdomain: "lazylibrarian"
## Set lazylibrarian_with_calibre as "linuxserver/calibre-web:calibre" to enable calibre db import. Set as "" to disable
#lazylibrarian_with_calibre: "linuxserver/calibre-web:calibre"
lazylibrarian_with_calibre: ""

###
###
###